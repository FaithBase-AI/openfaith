/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as OnboardingRouteRouteImport } from './routes/_onboarding/route'
import { Route as AuthRouteRouteImport } from './routes/_auth/route'
import { Route as AppRouteRouteImport } from './routes/_app/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as OauthProviderRouteImport } from './routes/oauth/$provider'
import { Route as OnboardingOnboardingRouteImport } from './routes/_onboarding/onboarding'
import { Route as AuthSignInRouteImport } from './routes/_auth/sign-in'
import { Route as AppDashboardRouteImport } from './routes/_app/dashboard'
import { Route as AppGroupRouteRouteImport } from './routes/_app/$group/route'
import { Route as AppSettingsTeamRouteImport } from './routes/_app/settings/team'
import { Route as AppSettingsProfileRouteImport } from './routes/_app/settings/profile'
import { Route as AppSettingsIntegrationsRouteImport } from './routes/_app/settings/integrations'
import { Route as AppSettingsGeneralRouteImport } from './routes/_app/settings/general'
import { Route as AppDevLogsRouteImport } from './routes/_app/dev/logs'
import { Route as AppAdminUsersRouteImport } from './routes/_app/admin/users'
import { Route as AppAdminOrgsRouteImport } from './routes/_app/admin/orgs'
import { Route as AppGroupEntityRouteRouteImport } from './routes/_app/$group/$entity/route'
import { Route as AppGroupEntityIndexRouteImport } from './routes/_app/$group/$entity/index'
import { Route as AppGroupEntityEntityIdRouteImport } from './routes/_app/$group/$entity/$entityId'

const OnboardingRouteRoute = OnboardingRouteRouteImport.update({
  id: '/_onboarding',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const OauthProviderRoute = OauthProviderRouteImport.update({
  id: '/oauth/$provider',
  path: '/oauth/$provider',
  getParentRoute: () => rootRouteImport,
} as any)
const OnboardingOnboardingRoute = OnboardingOnboardingRouteImport.update({
  id: '/onboarding',
  path: '/onboarding',
  getParentRoute: () => OnboardingRouteRoute,
} as any)
const AuthSignInRoute = AuthSignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AppDashboardRoute = AppDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppGroupRouteRoute = AppGroupRouteRouteImport.update({
  id: '/$group',
  path: '/$group',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppSettingsTeamRoute = AppSettingsTeamRouteImport.update({
  id: '/settings/team',
  path: '/settings/team',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppSettingsProfileRoute = AppSettingsProfileRouteImport.update({
  id: '/settings/profile',
  path: '/settings/profile',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppSettingsIntegrationsRoute = AppSettingsIntegrationsRouteImport.update({
  id: '/settings/integrations',
  path: '/settings/integrations',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppSettingsGeneralRoute = AppSettingsGeneralRouteImport.update({
  id: '/settings/general',
  path: '/settings/general',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppDevLogsRoute = AppDevLogsRouteImport.update({
  id: '/dev/logs',
  path: '/dev/logs',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppAdminUsersRoute = AppAdminUsersRouteImport.update({
  id: '/admin/users',
  path: '/admin/users',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppAdminOrgsRoute = AppAdminOrgsRouteImport.update({
  id: '/admin/orgs',
  path: '/admin/orgs',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppGroupEntityRouteRoute = AppGroupEntityRouteRouteImport.update({
  id: '/$entity',
  path: '/$entity',
  getParentRoute: () => AppGroupRouteRoute,
} as any)
const AppGroupEntityIndexRoute = AppGroupEntityIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppGroupEntityRouteRoute,
} as any)
const AppGroupEntityEntityIdRoute = AppGroupEntityEntityIdRouteImport.update({
  id: '/$entityId',
  path: '/$entityId',
  getParentRoute: () => AppGroupEntityRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$group': typeof AppGroupRouteRouteWithChildren
  '/dashboard': typeof AppDashboardRoute
  '/sign-in': typeof AuthSignInRoute
  '/onboarding': typeof OnboardingOnboardingRoute
  '/oauth/$provider': typeof OauthProviderRoute
  '/$group/$entity': typeof AppGroupEntityRouteRouteWithChildren
  '/admin/orgs': typeof AppAdminOrgsRoute
  '/admin/users': typeof AppAdminUsersRoute
  '/dev/logs': typeof AppDevLogsRoute
  '/settings/general': typeof AppSettingsGeneralRoute
  '/settings/integrations': typeof AppSettingsIntegrationsRoute
  '/settings/profile': typeof AppSettingsProfileRoute
  '/settings/team': typeof AppSettingsTeamRoute
  '/$group/$entity/$entityId': typeof AppGroupEntityEntityIdRoute
  '/$group/$entity/': typeof AppGroupEntityIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$group': typeof AppGroupRouteRouteWithChildren
  '/dashboard': typeof AppDashboardRoute
  '/sign-in': typeof AuthSignInRoute
  '/onboarding': typeof OnboardingOnboardingRoute
  '/oauth/$provider': typeof OauthProviderRoute
  '/admin/orgs': typeof AppAdminOrgsRoute
  '/admin/users': typeof AppAdminUsersRoute
  '/dev/logs': typeof AppDevLogsRoute
  '/settings/general': typeof AppSettingsGeneralRoute
  '/settings/integrations': typeof AppSettingsIntegrationsRoute
  '/settings/profile': typeof AppSettingsProfileRoute
  '/settings/team': typeof AppSettingsTeamRoute
  '/$group/$entity/$entityId': typeof AppGroupEntityEntityIdRoute
  '/$group/$entity': typeof AppGroupEntityIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_app': typeof AppRouteRouteWithChildren
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_onboarding': typeof OnboardingRouteRouteWithChildren
  '/_app/$group': typeof AppGroupRouteRouteWithChildren
  '/_app/dashboard': typeof AppDashboardRoute
  '/_auth/sign-in': typeof AuthSignInRoute
  '/_onboarding/onboarding': typeof OnboardingOnboardingRoute
  '/oauth/$provider': typeof OauthProviderRoute
  '/_app/$group/$entity': typeof AppGroupEntityRouteRouteWithChildren
  '/_app/admin/orgs': typeof AppAdminOrgsRoute
  '/_app/admin/users': typeof AppAdminUsersRoute
  '/_app/dev/logs': typeof AppDevLogsRoute
  '/_app/settings/general': typeof AppSettingsGeneralRoute
  '/_app/settings/integrations': typeof AppSettingsIntegrationsRoute
  '/_app/settings/profile': typeof AppSettingsProfileRoute
  '/_app/settings/team': typeof AppSettingsTeamRoute
  '/_app/$group/$entity/$entityId': typeof AppGroupEntityEntityIdRoute
  '/_app/$group/$entity/': typeof AppGroupEntityIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$group'
    | '/dashboard'
    | '/sign-in'
    | '/onboarding'
    | '/oauth/$provider'
    | '/$group/$entity'
    | '/admin/orgs'
    | '/admin/users'
    | '/dev/logs'
    | '/settings/general'
    | '/settings/integrations'
    | '/settings/profile'
    | '/settings/team'
    | '/$group/$entity/$entityId'
    | '/$group/$entity/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$group'
    | '/dashboard'
    | '/sign-in'
    | '/onboarding'
    | '/oauth/$provider'
    | '/admin/orgs'
    | '/admin/users'
    | '/dev/logs'
    | '/settings/general'
    | '/settings/integrations'
    | '/settings/profile'
    | '/settings/team'
    | '/$group/$entity/$entityId'
    | '/$group/$entity'
  id:
    | '__root__'
    | '/'
    | '/_app'
    | '/_auth'
    | '/_onboarding'
    | '/_app/$group'
    | '/_app/dashboard'
    | '/_auth/sign-in'
    | '/_onboarding/onboarding'
    | '/oauth/$provider'
    | '/_app/$group/$entity'
    | '/_app/admin/orgs'
    | '/_app/admin/users'
    | '/_app/dev/logs'
    | '/_app/settings/general'
    | '/_app/settings/integrations'
    | '/_app/settings/profile'
    | '/_app/settings/team'
    | '/_app/$group/$entity/$entityId'
    | '/_app/$group/$entity/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  OnboardingRouteRoute: typeof OnboardingRouteRouteWithChildren
  OauthProviderRoute: typeof OauthProviderRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_onboarding': {
      id: '/_onboarding'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof OnboardingRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/oauth/$provider': {
      id: '/oauth/$provider'
      path: '/oauth/$provider'
      fullPath: '/oauth/$provider'
      preLoaderRoute: typeof OauthProviderRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_onboarding/onboarding': {
      id: '/_onboarding/onboarding'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof OnboardingOnboardingRouteImport
      parentRoute: typeof OnboardingRouteRoute
    }
    '/_auth/sign-in': {
      id: '/_auth/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof AuthSignInRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_app/dashboard': {
      id: '/_app/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AppDashboardRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/$group': {
      id: '/_app/$group'
      path: '/$group'
      fullPath: '/$group'
      preLoaderRoute: typeof AppGroupRouteRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/settings/team': {
      id: '/_app/settings/team'
      path: '/settings/team'
      fullPath: '/settings/team'
      preLoaderRoute: typeof AppSettingsTeamRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/settings/profile': {
      id: '/_app/settings/profile'
      path: '/settings/profile'
      fullPath: '/settings/profile'
      preLoaderRoute: typeof AppSettingsProfileRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/settings/integrations': {
      id: '/_app/settings/integrations'
      path: '/settings/integrations'
      fullPath: '/settings/integrations'
      preLoaderRoute: typeof AppSettingsIntegrationsRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/settings/general': {
      id: '/_app/settings/general'
      path: '/settings/general'
      fullPath: '/settings/general'
      preLoaderRoute: typeof AppSettingsGeneralRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/dev/logs': {
      id: '/_app/dev/logs'
      path: '/dev/logs'
      fullPath: '/dev/logs'
      preLoaderRoute: typeof AppDevLogsRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/admin/users': {
      id: '/_app/admin/users'
      path: '/admin/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AppAdminUsersRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/admin/orgs': {
      id: '/_app/admin/orgs'
      path: '/admin/orgs'
      fullPath: '/admin/orgs'
      preLoaderRoute: typeof AppAdminOrgsRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/$group/$entity': {
      id: '/_app/$group/$entity'
      path: '/$entity'
      fullPath: '/$group/$entity'
      preLoaderRoute: typeof AppGroupEntityRouteRouteImport
      parentRoute: typeof AppGroupRouteRoute
    }
    '/_app/$group/$entity/': {
      id: '/_app/$group/$entity/'
      path: '/'
      fullPath: '/$group/$entity/'
      preLoaderRoute: typeof AppGroupEntityIndexRouteImport
      parentRoute: typeof AppGroupEntityRouteRoute
    }
    '/_app/$group/$entity/$entityId': {
      id: '/_app/$group/$entity/$entityId'
      path: '/$entityId'
      fullPath: '/$group/$entity/$entityId'
      preLoaderRoute: typeof AppGroupEntityEntityIdRouteImport
      parentRoute: typeof AppGroupEntityRouteRoute
    }
  }
}

interface AppGroupEntityRouteRouteChildren {
  AppGroupEntityEntityIdRoute: typeof AppGroupEntityEntityIdRoute
  AppGroupEntityIndexRoute: typeof AppGroupEntityIndexRoute
}

const AppGroupEntityRouteRouteChildren: AppGroupEntityRouteRouteChildren = {
  AppGroupEntityEntityIdRoute: AppGroupEntityEntityIdRoute,
  AppGroupEntityIndexRoute: AppGroupEntityIndexRoute,
}

const AppGroupEntityRouteRouteWithChildren =
  AppGroupEntityRouteRoute._addFileChildren(AppGroupEntityRouteRouteChildren)

interface AppGroupRouteRouteChildren {
  AppGroupEntityRouteRoute: typeof AppGroupEntityRouteRouteWithChildren
}

const AppGroupRouteRouteChildren: AppGroupRouteRouteChildren = {
  AppGroupEntityRouteRoute: AppGroupEntityRouteRouteWithChildren,
}

const AppGroupRouteRouteWithChildren = AppGroupRouteRoute._addFileChildren(
  AppGroupRouteRouteChildren,
)

interface AppRouteRouteChildren {
  AppGroupRouteRoute: typeof AppGroupRouteRouteWithChildren
  AppDashboardRoute: typeof AppDashboardRoute
  AppAdminOrgsRoute: typeof AppAdminOrgsRoute
  AppAdminUsersRoute: typeof AppAdminUsersRoute
  AppDevLogsRoute: typeof AppDevLogsRoute
  AppSettingsGeneralRoute: typeof AppSettingsGeneralRoute
  AppSettingsIntegrationsRoute: typeof AppSettingsIntegrationsRoute
  AppSettingsProfileRoute: typeof AppSettingsProfileRoute
  AppSettingsTeamRoute: typeof AppSettingsTeamRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppGroupRouteRoute: AppGroupRouteRouteWithChildren,
  AppDashboardRoute: AppDashboardRoute,
  AppAdminOrgsRoute: AppAdminOrgsRoute,
  AppAdminUsersRoute: AppAdminUsersRoute,
  AppDevLogsRoute: AppDevLogsRoute,
  AppSettingsGeneralRoute: AppSettingsGeneralRoute,
  AppSettingsIntegrationsRoute: AppSettingsIntegrationsRoute,
  AppSettingsProfileRoute: AppSettingsProfileRoute,
  AppSettingsTeamRoute: AppSettingsTeamRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthSignInRoute: typeof AuthSignInRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthSignInRoute: AuthSignInRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface OnboardingRouteRouteChildren {
  OnboardingOnboardingRoute: typeof OnboardingOnboardingRoute
}

const OnboardingRouteRouteChildren: OnboardingRouteRouteChildren = {
  OnboardingOnboardingRoute: OnboardingOnboardingRoute,
}

const OnboardingRouteRouteWithChildren = OnboardingRouteRoute._addFileChildren(
  OnboardingRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  OnboardingRouteRoute: OnboardingRouteRouteWithChildren,
  OauthProviderRoute: OauthProviderRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
