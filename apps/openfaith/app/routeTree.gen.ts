/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as OnboardingRouteRouteImport } from './routes/_onboarding/route'
import { Route as MarketingRouteRouteImport } from './routes/_marketing/route'
import { Route as AuthRouteRouteImport } from './routes/_auth/route'
import { Route as AppRouteRouteImport } from './routes/_app/route'
import { Route as MarketingIndexRouteImport } from './routes/_marketing/index'
import { Route as OauthProviderRouteImport } from './routes/oauth/$provider'
import { Route as OnboardingOnboardingRouteImport } from './routes/_onboarding/onboarding'
import { Route as MarketingVisionRouteImport } from './routes/_marketing/vision'
import { Route as MarketingPricingRouteImport } from './routes/_marketing/pricing'
import { Route as MarketingIntegrationsRouteImport } from './routes/_marketing/integrations'
import { Route as MarketingFeaturesRouteImport } from './routes/_marketing/features'
import { Route as MarketingBlogRouteImport } from './routes/_marketing/blog'
import { Route as AuthSignInRouteImport } from './routes/_auth/sign-in'
import { Route as AppDashboardRouteImport } from './routes/_app/dashboard'
import { Route as AppAiRouteImport } from './routes/_app/ai'
import { Route as AppGroupRouteRouteImport } from './routes/_app/$group/route'
import { Route as AppSettingsTeamRouteImport } from './routes/_app/settings/team'
import { Route as AppSettingsProfileRouteImport } from './routes/_app/settings/profile'
import { Route as AppSettingsIntegrationsRouteImport } from './routes/_app/settings/integrations'
import { Route as AppSettingsGeneralRouteImport } from './routes/_app/settings/general'
import { Route as AppDevLogsRouteImport } from './routes/_app/dev/logs'
import { Route as AppAdminUsersRouteImport } from './routes/_app/admin/users'
import { Route as AppAdminOrgsRouteImport } from './routes/_app/admin/orgs'
import { Route as AppGroupEntityRouteRouteImport } from './routes/_app/$group/$entity/route'
import { Route as AppGroupEntityIndexRouteImport } from './routes/_app/$group/$entity/index'
import { Route as AppGroupEntityEntityIdRouteImport } from './routes/_app/$group/$entity/$entityId'
import { ServerRoute as ApiSplatServerRouteImport } from './routes/api/$'
import { ServerRoute as ApiAuthRefreshServerRouteImport } from './routes/api/auth/refresh'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'
import { ServerRoute as ApiAiChatServerRouteImport } from './routes/api/ai/chat'

const rootServerRouteImport = createServerRootRoute()

const OnboardingRouteRoute = OnboardingRouteRouteImport.update({
  id: '/_onboarding',
  getParentRoute: () => rootRouteImport,
} as any)
const MarketingRouteRoute = MarketingRouteRouteImport.update({
  id: '/_marketing',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const MarketingIndexRoute = MarketingIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MarketingRouteRoute,
} as any)
const OauthProviderRoute = OauthProviderRouteImport.update({
  id: '/oauth/$provider',
  path: '/oauth/$provider',
  getParentRoute: () => rootRouteImport,
} as any)
const OnboardingOnboardingRoute = OnboardingOnboardingRouteImport.update({
  id: '/onboarding',
  path: '/onboarding',
  getParentRoute: () => OnboardingRouteRoute,
} as any)
const MarketingVisionRoute = MarketingVisionRouteImport.update({
  id: '/vision',
  path: '/vision',
  getParentRoute: () => MarketingRouteRoute,
} as any)
const MarketingPricingRoute = MarketingPricingRouteImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => MarketingRouteRoute,
} as any)
const MarketingIntegrationsRoute = MarketingIntegrationsRouteImport.update({
  id: '/integrations',
  path: '/integrations',
  getParentRoute: () => MarketingRouteRoute,
} as any)
const MarketingFeaturesRoute = MarketingFeaturesRouteImport.update({
  id: '/features',
  path: '/features',
  getParentRoute: () => MarketingRouteRoute,
} as any)
const MarketingBlogRoute = MarketingBlogRouteImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => MarketingRouteRoute,
} as any)
const AuthSignInRoute = AuthSignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AppDashboardRoute = AppDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppAiRoute = AppAiRouteImport.update({
  id: '/ai',
  path: '/ai',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppGroupRouteRoute = AppGroupRouteRouteImport.update({
  id: '/$group',
  path: '/$group',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppSettingsTeamRoute = AppSettingsTeamRouteImport.update({
  id: '/settings/team',
  path: '/settings/team',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppSettingsProfileRoute = AppSettingsProfileRouteImport.update({
  id: '/settings/profile',
  path: '/settings/profile',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppSettingsIntegrationsRoute = AppSettingsIntegrationsRouteImport.update({
  id: '/settings/integrations',
  path: '/settings/integrations',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppSettingsGeneralRoute = AppSettingsGeneralRouteImport.update({
  id: '/settings/general',
  path: '/settings/general',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppDevLogsRoute = AppDevLogsRouteImport.update({
  id: '/dev/logs',
  path: '/dev/logs',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppAdminUsersRoute = AppAdminUsersRouteImport.update({
  id: '/admin/users',
  path: '/admin/users',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppAdminOrgsRoute = AppAdminOrgsRouteImport.update({
  id: '/admin/orgs',
  path: '/admin/orgs',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppGroupEntityRouteRoute = AppGroupEntityRouteRouteImport.update({
  id: '/$entity',
  path: '/$entity',
  getParentRoute: () => AppGroupRouteRoute,
} as any)
const AppGroupEntityIndexRoute = AppGroupEntityIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppGroupEntityRouteRoute,
} as any)
const AppGroupEntityEntityIdRoute = AppGroupEntityEntityIdRouteImport.update({
  id: '/$entityId',
  path: '/$entityId',
  getParentRoute: () => AppGroupEntityRouteRoute,
} as any)
const ApiSplatServerRoute = ApiSplatServerRouteImport.update({
  id: '/api/$',
  path: '/api/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthRefreshServerRoute = ApiAuthRefreshServerRouteImport.update({
  id: '/api/auth/refresh',
  path: '/api/auth/refresh',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAiChatServerRoute = ApiAiChatServerRouteImport.update({
  id: '/api/ai/chat',
  path: '/api/ai/chat',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/$group': typeof AppGroupRouteRouteWithChildren
  '/ai': typeof AppAiRoute
  '/dashboard': typeof AppDashboardRoute
  '/sign-in': typeof AuthSignInRoute
  '/blog': typeof MarketingBlogRoute
  '/features': typeof MarketingFeaturesRoute
  '/integrations': typeof MarketingIntegrationsRoute
  '/pricing': typeof MarketingPricingRoute
  '/vision': typeof MarketingVisionRoute
  '/onboarding': typeof OnboardingOnboardingRoute
  '/oauth/$provider': typeof OauthProviderRoute
  '/': typeof MarketingIndexRoute
  '/$group/$entity': typeof AppGroupEntityRouteRouteWithChildren
  '/admin/orgs': typeof AppAdminOrgsRoute
  '/admin/users': typeof AppAdminUsersRoute
  '/dev/logs': typeof AppDevLogsRoute
  '/settings/general': typeof AppSettingsGeneralRoute
  '/settings/integrations': typeof AppSettingsIntegrationsRoute
  '/settings/profile': typeof AppSettingsProfileRoute
  '/settings/team': typeof AppSettingsTeamRoute
  '/$group/$entity/$entityId': typeof AppGroupEntityEntityIdRoute
  '/$group/$entity/': typeof AppGroupEntityIndexRoute
}
export interface FileRoutesByTo {
  '/$group': typeof AppGroupRouteRouteWithChildren
  '/ai': typeof AppAiRoute
  '/dashboard': typeof AppDashboardRoute
  '/sign-in': typeof AuthSignInRoute
  '/blog': typeof MarketingBlogRoute
  '/features': typeof MarketingFeaturesRoute
  '/integrations': typeof MarketingIntegrationsRoute
  '/pricing': typeof MarketingPricingRoute
  '/vision': typeof MarketingVisionRoute
  '/onboarding': typeof OnboardingOnboardingRoute
  '/oauth/$provider': typeof OauthProviderRoute
  '/': typeof MarketingIndexRoute
  '/admin/orgs': typeof AppAdminOrgsRoute
  '/admin/users': typeof AppAdminUsersRoute
  '/dev/logs': typeof AppDevLogsRoute
  '/settings/general': typeof AppSettingsGeneralRoute
  '/settings/integrations': typeof AppSettingsIntegrationsRoute
  '/settings/profile': typeof AppSettingsProfileRoute
  '/settings/team': typeof AppSettingsTeamRoute
  '/$group/$entity/$entityId': typeof AppGroupEntityEntityIdRoute
  '/$group/$entity': typeof AppGroupEntityIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteRouteWithChildren
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_marketing': typeof MarketingRouteRouteWithChildren
  '/_onboarding': typeof OnboardingRouteRouteWithChildren
  '/_app/$group': typeof AppGroupRouteRouteWithChildren
  '/_app/ai': typeof AppAiRoute
  '/_app/dashboard': typeof AppDashboardRoute
  '/_auth/sign-in': typeof AuthSignInRoute
  '/_marketing/blog': typeof MarketingBlogRoute
  '/_marketing/features': typeof MarketingFeaturesRoute
  '/_marketing/integrations': typeof MarketingIntegrationsRoute
  '/_marketing/pricing': typeof MarketingPricingRoute
  '/_marketing/vision': typeof MarketingVisionRoute
  '/_onboarding/onboarding': typeof OnboardingOnboardingRoute
  '/oauth/$provider': typeof OauthProviderRoute
  '/_marketing/': typeof MarketingIndexRoute
  '/_app/$group/$entity': typeof AppGroupEntityRouteRouteWithChildren
  '/_app/admin/orgs': typeof AppAdminOrgsRoute
  '/_app/admin/users': typeof AppAdminUsersRoute
  '/_app/dev/logs': typeof AppDevLogsRoute
  '/_app/settings/general': typeof AppSettingsGeneralRoute
  '/_app/settings/integrations': typeof AppSettingsIntegrationsRoute
  '/_app/settings/profile': typeof AppSettingsProfileRoute
  '/_app/settings/team': typeof AppSettingsTeamRoute
  '/_app/$group/$entity/$entityId': typeof AppGroupEntityEntityIdRoute
  '/_app/$group/$entity/': typeof AppGroupEntityIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/$group'
    | '/ai'
    | '/dashboard'
    | '/sign-in'
    | '/blog'
    | '/features'
    | '/integrations'
    | '/pricing'
    | '/vision'
    | '/onboarding'
    | '/oauth/$provider'
    | '/'
    | '/$group/$entity'
    | '/admin/orgs'
    | '/admin/users'
    | '/dev/logs'
    | '/settings/general'
    | '/settings/integrations'
    | '/settings/profile'
    | '/settings/team'
    | '/$group/$entity/$entityId'
    | '/$group/$entity/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/$group'
    | '/ai'
    | '/dashboard'
    | '/sign-in'
    | '/blog'
    | '/features'
    | '/integrations'
    | '/pricing'
    | '/vision'
    | '/onboarding'
    | '/oauth/$provider'
    | '/'
    | '/admin/orgs'
    | '/admin/users'
    | '/dev/logs'
    | '/settings/general'
    | '/settings/integrations'
    | '/settings/profile'
    | '/settings/team'
    | '/$group/$entity/$entityId'
    | '/$group/$entity'
  id:
    | '__root__'
    | '/_app'
    | '/_auth'
    | '/_marketing'
    | '/_onboarding'
    | '/_app/$group'
    | '/_app/ai'
    | '/_app/dashboard'
    | '/_auth/sign-in'
    | '/_marketing/blog'
    | '/_marketing/features'
    | '/_marketing/integrations'
    | '/_marketing/pricing'
    | '/_marketing/vision'
    | '/_onboarding/onboarding'
    | '/oauth/$provider'
    | '/_marketing/'
    | '/_app/$group/$entity'
    | '/_app/admin/orgs'
    | '/_app/admin/users'
    | '/_app/dev/logs'
    | '/_app/settings/general'
    | '/_app/settings/integrations'
    | '/_app/settings/profile'
    | '/_app/settings/team'
    | '/_app/$group/$entity/$entityId'
    | '/_app/$group/$entity/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRouteRoute: typeof AppRouteRouteWithChildren
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  MarketingRouteRoute: typeof MarketingRouteRouteWithChildren
  OnboardingRouteRoute: typeof OnboardingRouteRouteWithChildren
  OauthProviderRoute: typeof OauthProviderRoute
}
export interface FileServerRoutesByFullPath {
  '/api/$': typeof ApiSplatServerRoute
  '/api/ai/chat': typeof ApiAiChatServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/auth/refresh': typeof ApiAuthRefreshServerRoute
}
export interface FileServerRoutesByTo {
  '/api/$': typeof ApiSplatServerRoute
  '/api/ai/chat': typeof ApiAiChatServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/auth/refresh': typeof ApiAuthRefreshServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/$': typeof ApiSplatServerRoute
  '/api/ai/chat': typeof ApiAiChatServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/auth/refresh': typeof ApiAuthRefreshServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/$' | '/api/ai/chat' | '/api/auth/$' | '/api/auth/refresh'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/$' | '/api/ai/chat' | '/api/auth/$' | '/api/auth/refresh'
  id:
    | '__root__'
    | '/api/$'
    | '/api/ai/chat'
    | '/api/auth/$'
    | '/api/auth/refresh'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiSplatServerRoute: typeof ApiSplatServerRoute
  ApiAiChatServerRoute: typeof ApiAiChatServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiAuthRefreshServerRoute: typeof ApiAuthRefreshServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_onboarding': {
      id: '/_onboarding'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof OnboardingRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_marketing': {
      id: '/_marketing'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MarketingRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_marketing/': {
      id: '/_marketing/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MarketingIndexRouteImport
      parentRoute: typeof MarketingRouteRoute
    }
    '/oauth/$provider': {
      id: '/oauth/$provider'
      path: '/oauth/$provider'
      fullPath: '/oauth/$provider'
      preLoaderRoute: typeof OauthProviderRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_onboarding/onboarding': {
      id: '/_onboarding/onboarding'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof OnboardingOnboardingRouteImport
      parentRoute: typeof OnboardingRouteRoute
    }
    '/_marketing/vision': {
      id: '/_marketing/vision'
      path: '/vision'
      fullPath: '/vision'
      preLoaderRoute: typeof MarketingVisionRouteImport
      parentRoute: typeof MarketingRouteRoute
    }
    '/_marketing/pricing': {
      id: '/_marketing/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof MarketingPricingRouteImport
      parentRoute: typeof MarketingRouteRoute
    }
    '/_marketing/integrations': {
      id: '/_marketing/integrations'
      path: '/integrations'
      fullPath: '/integrations'
      preLoaderRoute: typeof MarketingIntegrationsRouteImport
      parentRoute: typeof MarketingRouteRoute
    }
    '/_marketing/features': {
      id: '/_marketing/features'
      path: '/features'
      fullPath: '/features'
      preLoaderRoute: typeof MarketingFeaturesRouteImport
      parentRoute: typeof MarketingRouteRoute
    }
    '/_marketing/blog': {
      id: '/_marketing/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof MarketingBlogRouteImport
      parentRoute: typeof MarketingRouteRoute
    }
    '/_auth/sign-in': {
      id: '/_auth/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof AuthSignInRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_app/dashboard': {
      id: '/_app/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AppDashboardRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/ai': {
      id: '/_app/ai'
      path: '/ai'
      fullPath: '/ai'
      preLoaderRoute: typeof AppAiRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/$group': {
      id: '/_app/$group'
      path: '/$group'
      fullPath: '/$group'
      preLoaderRoute: typeof AppGroupRouteRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/settings/team': {
      id: '/_app/settings/team'
      path: '/settings/team'
      fullPath: '/settings/team'
      preLoaderRoute: typeof AppSettingsTeamRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/settings/profile': {
      id: '/_app/settings/profile'
      path: '/settings/profile'
      fullPath: '/settings/profile'
      preLoaderRoute: typeof AppSettingsProfileRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/settings/integrations': {
      id: '/_app/settings/integrations'
      path: '/settings/integrations'
      fullPath: '/settings/integrations'
      preLoaderRoute: typeof AppSettingsIntegrationsRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/settings/general': {
      id: '/_app/settings/general'
      path: '/settings/general'
      fullPath: '/settings/general'
      preLoaderRoute: typeof AppSettingsGeneralRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/dev/logs': {
      id: '/_app/dev/logs'
      path: '/dev/logs'
      fullPath: '/dev/logs'
      preLoaderRoute: typeof AppDevLogsRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/admin/users': {
      id: '/_app/admin/users'
      path: '/admin/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AppAdminUsersRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/admin/orgs': {
      id: '/_app/admin/orgs'
      path: '/admin/orgs'
      fullPath: '/admin/orgs'
      preLoaderRoute: typeof AppAdminOrgsRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/$group/$entity': {
      id: '/_app/$group/$entity'
      path: '/$entity'
      fullPath: '/$group/$entity'
      preLoaderRoute: typeof AppGroupEntityRouteRouteImport
      parentRoute: typeof AppGroupRouteRoute
    }
    '/_app/$group/$entity/': {
      id: '/_app/$group/$entity/'
      path: '/'
      fullPath: '/$group/$entity/'
      preLoaderRoute: typeof AppGroupEntityIndexRouteImport
      parentRoute: typeof AppGroupEntityRouteRoute
    }
    '/_app/$group/$entity/$entityId': {
      id: '/_app/$group/$entity/$entityId'
      path: '/$entityId'
      fullPath: '/$group/$entity/$entityId'
      preLoaderRoute: typeof AppGroupEntityEntityIdRouteImport
      parentRoute: typeof AppGroupEntityRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/$': {
      id: '/api/$'
      path: '/api/$'
      fullPath: '/api/$'
      preLoaderRoute: typeof ApiSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/refresh': {
      id: '/api/auth/refresh'
      path: '/api/auth/refresh'
      fullPath: '/api/auth/refresh'
      preLoaderRoute: typeof ApiAuthRefreshServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/ai/chat': {
      id: '/api/ai/chat'
      path: '/api/ai/chat'
      fullPath: '/api/ai/chat'
      preLoaderRoute: typeof ApiAiChatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AppGroupEntityRouteRouteChildren {
  AppGroupEntityEntityIdRoute: typeof AppGroupEntityEntityIdRoute
  AppGroupEntityIndexRoute: typeof AppGroupEntityIndexRoute
}

const AppGroupEntityRouteRouteChildren: AppGroupEntityRouteRouteChildren = {
  AppGroupEntityEntityIdRoute: AppGroupEntityEntityIdRoute,
  AppGroupEntityIndexRoute: AppGroupEntityIndexRoute,
}

const AppGroupEntityRouteRouteWithChildren =
  AppGroupEntityRouteRoute._addFileChildren(AppGroupEntityRouteRouteChildren)

interface AppGroupRouteRouteChildren {
  AppGroupEntityRouteRoute: typeof AppGroupEntityRouteRouteWithChildren
}

const AppGroupRouteRouteChildren: AppGroupRouteRouteChildren = {
  AppGroupEntityRouteRoute: AppGroupEntityRouteRouteWithChildren,
}

const AppGroupRouteRouteWithChildren = AppGroupRouteRoute._addFileChildren(
  AppGroupRouteRouteChildren,
)

interface AppRouteRouteChildren {
  AppGroupRouteRoute: typeof AppGroupRouteRouteWithChildren
  AppAiRoute: typeof AppAiRoute
  AppDashboardRoute: typeof AppDashboardRoute
  AppAdminOrgsRoute: typeof AppAdminOrgsRoute
  AppAdminUsersRoute: typeof AppAdminUsersRoute
  AppDevLogsRoute: typeof AppDevLogsRoute
  AppSettingsGeneralRoute: typeof AppSettingsGeneralRoute
  AppSettingsIntegrationsRoute: typeof AppSettingsIntegrationsRoute
  AppSettingsProfileRoute: typeof AppSettingsProfileRoute
  AppSettingsTeamRoute: typeof AppSettingsTeamRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppGroupRouteRoute: AppGroupRouteRouteWithChildren,
  AppAiRoute: AppAiRoute,
  AppDashboardRoute: AppDashboardRoute,
  AppAdminOrgsRoute: AppAdminOrgsRoute,
  AppAdminUsersRoute: AppAdminUsersRoute,
  AppDevLogsRoute: AppDevLogsRoute,
  AppSettingsGeneralRoute: AppSettingsGeneralRoute,
  AppSettingsIntegrationsRoute: AppSettingsIntegrationsRoute,
  AppSettingsProfileRoute: AppSettingsProfileRoute,
  AppSettingsTeamRoute: AppSettingsTeamRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthSignInRoute: typeof AuthSignInRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthSignInRoute: AuthSignInRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface MarketingRouteRouteChildren {
  MarketingBlogRoute: typeof MarketingBlogRoute
  MarketingFeaturesRoute: typeof MarketingFeaturesRoute
  MarketingIntegrationsRoute: typeof MarketingIntegrationsRoute
  MarketingPricingRoute: typeof MarketingPricingRoute
  MarketingVisionRoute: typeof MarketingVisionRoute
  MarketingIndexRoute: typeof MarketingIndexRoute
}

const MarketingRouteRouteChildren: MarketingRouteRouteChildren = {
  MarketingBlogRoute: MarketingBlogRoute,
  MarketingFeaturesRoute: MarketingFeaturesRoute,
  MarketingIntegrationsRoute: MarketingIntegrationsRoute,
  MarketingPricingRoute: MarketingPricingRoute,
  MarketingVisionRoute: MarketingVisionRoute,
  MarketingIndexRoute: MarketingIndexRoute,
}

const MarketingRouteRouteWithChildren = MarketingRouteRoute._addFileChildren(
  MarketingRouteRouteChildren,
)

interface OnboardingRouteRouteChildren {
  OnboardingOnboardingRoute: typeof OnboardingOnboardingRoute
}

const OnboardingRouteRouteChildren: OnboardingRouteRouteChildren = {
  OnboardingOnboardingRoute: OnboardingOnboardingRoute,
}

const OnboardingRouteRouteWithChildren = OnboardingRouteRoute._addFileChildren(
  OnboardingRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AppRouteRoute: AppRouteRouteWithChildren,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  MarketingRouteRoute: MarketingRouteRouteWithChildren,
  OnboardingRouteRoute: OnboardingRouteRouteWithChildren,
  OauthProviderRoute: OauthProviderRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiSplatServerRoute: ApiSplatServerRoute,
  ApiAiChatServerRoute: ApiAiChatServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiAuthRefreshServerRoute: ApiAuthRefreshServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
