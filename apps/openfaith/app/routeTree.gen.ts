/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as OnboardingRouteRouteImport } from './routes/_onboarding/route'
import { Route as AuthRouteRouteImport } from './routes/_auth/route'
import { Route as AppRouteRouteImport } from './routes/_app/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as OauthProviderRouteImport } from './routes/oauth/$provider'
import { Route as OnboardingCreateOrgRouteImport } from './routes/_onboarding/create-org'
import { Route as AuthSignInRouteImport } from './routes/_auth/sign-in'
import { Route as AppDashboardRouteImport } from './routes/_app/dashboard'
import { ServerRoute as ApiTrpcSplatServerRouteImport } from './routes/api/trpc.$'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth.$'
import { ServerRoute as ApiApiSplatServerRouteImport } from './routes/api/api.$'

const rootServerRouteImport = createServerRootRoute()

const OnboardingRouteRoute = OnboardingRouteRouteImport.update({
  id: '/_onboarding',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const OauthProviderRoute = OauthProviderRouteImport.update({
  id: '/oauth/$provider',
  path: '/oauth/$provider',
  getParentRoute: () => rootRouteImport,
} as any)
const OnboardingCreateOrgRoute = OnboardingCreateOrgRouteImport.update({
  id: '/create-org',
  path: '/create-org',
  getParentRoute: () => OnboardingRouteRoute,
} as any)
const AuthSignInRoute = AuthSignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AppDashboardRoute = AppDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AppRouteRoute,
} as any)
const ApiTrpcSplatServerRoute = ApiTrpcSplatServerRouteImport.update({
  id: '/api/trpc/$',
  path: '/api/trpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiApiSplatServerRoute = ApiApiSplatServerRouteImport.update({
  id: '/api/api/$',
  path: '/api/api/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof AppDashboardRoute
  '/sign-in': typeof AuthSignInRoute
  '/create-org': typeof OnboardingCreateOrgRoute
  '/oauth/$provider': typeof OauthProviderRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof AppDashboardRoute
  '/sign-in': typeof AuthSignInRoute
  '/create-org': typeof OnboardingCreateOrgRoute
  '/oauth/$provider': typeof OauthProviderRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_app': typeof AppRouteRouteWithChildren
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_onboarding': typeof OnboardingRouteRouteWithChildren
  '/_app/dashboard': typeof AppDashboardRoute
  '/_auth/sign-in': typeof AuthSignInRoute
  '/_onboarding/create-org': typeof OnboardingCreateOrgRoute
  '/oauth/$provider': typeof OauthProviderRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/sign-in'
    | '/create-org'
    | '/oauth/$provider'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/dashboard' | '/sign-in' | '/create-org' | '/oauth/$provider'
  id:
    | '__root__'
    | '/'
    | '/_app'
    | '/_auth'
    | '/_onboarding'
    | '/_app/dashboard'
    | '/_auth/sign-in'
    | '/_onboarding/create-org'
    | '/oauth/$provider'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  OnboardingRouteRoute: typeof OnboardingRouteRouteWithChildren
  OauthProviderRoute: typeof OauthProviderRoute
}
export interface FileServerRoutesByFullPath {
  '/api/api/$': typeof ApiApiSplatServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/api/$': typeof ApiApiSplatServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/api/$': typeof ApiApiSplatServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/api/$' | '/api/auth/$' | '/api/trpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/api/$' | '/api/auth/$' | '/api/trpc/$'
  id: '__root__' | '/api/api/$' | '/api/auth/$' | '/api/trpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiApiSplatServerRoute: typeof ApiApiSplatServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiTrpcSplatServerRoute: typeof ApiTrpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_onboarding': {
      id: '/_onboarding'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof OnboardingRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/oauth/$provider': {
      id: '/oauth/$provider'
      path: '/oauth/$provider'
      fullPath: '/oauth/$provider'
      preLoaderRoute: typeof OauthProviderRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_onboarding/create-org': {
      id: '/_onboarding/create-org'
      path: '/create-org'
      fullPath: '/create-org'
      preLoaderRoute: typeof OnboardingCreateOrgRouteImport
      parentRoute: typeof OnboardingRouteRoute
    }
    '/_auth/sign-in': {
      id: '/_auth/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof AuthSignInRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_app/dashboard': {
      id: '/_app/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AppDashboardRouteImport
      parentRoute: typeof AppRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/trpc/$': {
      id: '/api/trpc/$'
      path: '/api/trpc/$'
      fullPath: '/api/trpc/$'
      preLoaderRoute: typeof ApiTrpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/api/$': {
      id: '/api/api/$'
      path: '/api/api/$'
      fullPath: '/api/api/$'
      preLoaderRoute: typeof ApiApiSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AppRouteRouteChildren {
  AppDashboardRoute: typeof AppDashboardRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppDashboardRoute: AppDashboardRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthSignInRoute: typeof AuthSignInRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthSignInRoute: AuthSignInRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface OnboardingRouteRouteChildren {
  OnboardingCreateOrgRoute: typeof OnboardingCreateOrgRoute
}

const OnboardingRouteRouteChildren: OnboardingRouteRouteChildren = {
  OnboardingCreateOrgRoute: OnboardingCreateOrgRoute,
}

const OnboardingRouteRouteWithChildren = OnboardingRouteRoute._addFileChildren(
  OnboardingRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  OnboardingRouteRoute: OnboardingRouteRouteWithChildren,
  OauthProviderRoute: OauthProviderRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiApiSplatServerRoute: ApiApiSplatServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiTrpcSplatServerRoute: ApiTrpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
