/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as onboardingRouteImport } from './routes/(onboarding)/route'
import { Route as authRouteImport } from './routes/(auth)/route'
import { Route as appRouteImport } from './routes/(app)/route'
import { Route as IndexImport } from './routes/index'
import { Route as OauthProviderImport } from './routes/oauth/$provider'
import { Route as onboardingCreateOrgImport } from './routes/(onboarding)/create-org'
import { Route as authSignInImport } from './routes/(auth)/sign-in'
import { Route as appDashboardImport } from './routes/(app)/dashboard'

// Create/Update Routes

const onboardingRouteRoute = onboardingRouteImport.update({
  id: '/(onboarding)',
  getParentRoute: () => rootRoute,
} as any)

const authRouteRoute = authRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const appRouteRoute = appRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const OauthProviderRoute = OauthProviderImport.update({
  id: '/oauth/$provider',
  path: '/oauth/$provider',
  getParentRoute: () => rootRoute,
} as any)

const onboardingCreateOrgRoute = onboardingCreateOrgImport.update({
  id: '/create-org',
  path: '/create-org',
  getParentRoute: () => onboardingRouteRoute,
} as any)

const authSignInRoute = authSignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => authRouteRoute,
} as any)

const appDashboardRoute = appDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => appRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appRouteImport
      parentRoute: typeof rootRoute
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteImport
      parentRoute: typeof rootRoute
    }
    '/(onboarding)': {
      id: '/(onboarding)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof onboardingRouteImport
      parentRoute: typeof rootRoute
    }
    '/(app)/dashboard': {
      id: '/(app)/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof appDashboardImport
      parentRoute: typeof appRouteImport
    }
    '/(auth)/sign-in': {
      id: '/(auth)/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInImport
      parentRoute: typeof authRouteImport
    }
    '/(onboarding)/create-org': {
      id: '/(onboarding)/create-org'
      path: '/create-org'
      fullPath: '/create-org'
      preLoaderRoute: typeof onboardingCreateOrgImport
      parentRoute: typeof onboardingRouteImport
    }
    '/oauth/$provider': {
      id: '/oauth/$provider'
      path: '/oauth/$provider'
      fullPath: '/oauth/$provider'
      preLoaderRoute: typeof OauthProviderImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface appRouteRouteChildren {
  appDashboardRoute: typeof appDashboardRoute
}

const appRouteRouteChildren: appRouteRouteChildren = {
  appDashboardRoute: appDashboardRoute,
}

const appRouteRouteWithChildren = appRouteRoute._addFileChildren(
  appRouteRouteChildren,
)

interface authRouteRouteChildren {
  authSignInRoute: typeof authSignInRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authSignInRoute: authSignInRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface onboardingRouteRouteChildren {
  onboardingCreateOrgRoute: typeof onboardingCreateOrgRoute
}

const onboardingRouteRouteChildren: onboardingRouteRouteChildren = {
  onboardingCreateOrgRoute: onboardingCreateOrgRoute,
}

const onboardingRouteRouteWithChildren = onboardingRouteRoute._addFileChildren(
  onboardingRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof onboardingRouteRouteWithChildren
  '/dashboard': typeof appDashboardRoute
  '/sign-in': typeof authSignInRoute
  '/create-org': typeof onboardingCreateOrgRoute
  '/oauth/$provider': typeof OauthProviderRoute
}

export interface FileRoutesByTo {
  '/': typeof onboardingRouteRouteWithChildren
  '/dashboard': typeof appDashboardRoute
  '/sign-in': typeof authSignInRoute
  '/create-org': typeof onboardingCreateOrgRoute
  '/oauth/$provider': typeof OauthProviderRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(app)': typeof appRouteRouteWithChildren
  '/(auth)': typeof authRouteRouteWithChildren
  '/(onboarding)': typeof onboardingRouteRouteWithChildren
  '/(app)/dashboard': typeof appDashboardRoute
  '/(auth)/sign-in': typeof authSignInRoute
  '/(onboarding)/create-org': typeof onboardingCreateOrgRoute
  '/oauth/$provider': typeof OauthProviderRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/sign-in'
    | '/create-org'
    | '/oauth/$provider'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/dashboard' | '/sign-in' | '/create-org' | '/oauth/$provider'
  id:
    | '__root__'
    | '/'
    | '/(app)'
    | '/(auth)'
    | '/(onboarding)'
    | '/(app)/dashboard'
    | '/(auth)/sign-in'
    | '/(onboarding)/create-org'
    | '/oauth/$provider'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  appRouteRoute: typeof appRouteRouteWithChildren
  authRouteRoute: typeof authRouteRouteWithChildren
  onboardingRouteRoute: typeof onboardingRouteRouteWithChildren
  OauthProviderRoute: typeof OauthProviderRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  appRouteRoute: appRouteRouteWithChildren,
  authRouteRoute: authRouteRouteWithChildren,
  onboardingRouteRoute: onboardingRouteRouteWithChildren,
  OauthProviderRoute: OauthProviderRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(app)",
        "/(auth)",
        "/(onboarding)",
        "/oauth/$provider"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(app)": {
      "filePath": "(app)/route.tsx",
      "children": [
        "/(app)/dashboard"
      ]
    },
    "/(auth)": {
      "filePath": "(auth)/route.tsx",
      "children": [
        "/(auth)/sign-in"
      ]
    },
    "/(onboarding)": {
      "filePath": "(onboarding)/route.tsx",
      "children": [
        "/(onboarding)/create-org"
      ]
    },
    "/(app)/dashboard": {
      "filePath": "(app)/dashboard.tsx",
      "parent": "/(app)"
    },
    "/(auth)/sign-in": {
      "filePath": "(auth)/sign-in.tsx",
      "parent": "/(auth)"
    },
    "/(onboarding)/create-org": {
      "filePath": "(onboarding)/create-org.tsx",
      "parent": "/(onboarding)"
    },
    "/oauth/$provider": {
      "filePath": "oauth/$provider.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
